// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Match {
  gameId       String     @id
  server       String
  participants Summoner[] @relation("MatchSummoners")
  MatchInfo    MatchInfo?
}

model MatchInfo {
  gameId             String   @id
  gameCreation       DateTime
  gameDuration       Int
  gameEndTimestamp   DateTime
  gameMode           String
  gameName           String
  gameStartTimestamp DateTime
  gameType           String
  gameVersion        String
  mapId              Int
  participants       Json
  platformId         String
  queueId            Int
  teams              Json
  tournamentCode     String
  match              Match    @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
}

model Challenges {
  puuid           String            @id @unique
  summoner        Summoner          @relation(fields: [puuid], references: [puuid])
  jackOfAllChamps ChampionDetails[] @relation("ChallengeHeroes")
}

model Summoner {
  puuid         String            @id @unique
  summonerId    String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  server        String
  username      String
  profileIconId Int
  summonerLevel Int
  revisionDate  DateTime
  accountId     String
  championData  ChampionMastery[]
  matches       Match[]           @relation("MatchSummoners")
  challenges    Challenges?
}

model ChampionDetails {
  id                   Int      @id @unique
  version              String?
  key                  String
  name                 String
  title                String
  blurb                String
  attack               Int
  defense              Int
  magic                Int
  difficulty           Int
  full                 String
  sprite               String
  group                String
  x                    Int
  y                    Int
  w                    Int
  h                    Int
  tags                 String[]
  partype              String
  hp                   Float
  hpperlevel           Float
  mp                   Float
  mpperlevel           Float
  movespeed            Float
  armor                Float
  armorperlevel        Float
  spellblock           Float
  spellblockperlevel   Float
  attackrange          Float
  hpregen              Float
  hpregenperlevel      Float
  mpregen              Float
  mpregenperlevel      Float
  crit                 Float
  critperlevel         Float
  attackdamage         Float
  attackdamageperlevel Float
  attackspeedperlevel  Float
  attackspeed          Float

  Challenges Challenges[] @relation("ChallengeHeroes")
}

model ChampionMastery {
  championId                   Int
  updatedAt                    DateTime @updatedAt
  championLevel                Int
  championPoints               Int
  chestGranted                 Boolean
  tokensEarned                 Int
  lastPlayTime                 DateTime
  championPointsUntilNextLevel Int
  championPointsSinceLastLevel Int
  puuid                        String
  summoner                     Summoner @relation(fields: [puuid], references: [puuid])

  @@unique([championId, puuid])
}

model ChallengesConfig {
  id             Int                     @id
  state          String
  leaderboard    Boolean
  endTimestamp   DateTime?
  thresholds     Json
  localizedNames ChallengeLocalization[]
}

enum Language {
  en_US
  // Add more languages as needed
}

model ChallengeLocalization {
  id               Int
  language         Language
  description      String
  name             String
  shortDescription String
  ChallengesConfig ChallengesConfig? @relation(fields: [id], references: [id], onDelete: Cascade)

  @@unique([id, language])
}
